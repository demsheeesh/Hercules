diff a/src/map/pc.c b/src/map/pc.c	(rejected hunks)
@@ -7515,10 +7515,155 @@ void pc_damage(struct map_session_data *sd,struct block_list *src,unsigned int h
 	sd->canlog_tick = timer->gettick();
 }
 
+void pc_record_mobkills(struct map_session_data *sd, struct mob_data *md)
+{
+	int type = 0;
+
+	if (!sd) return;
+
+	if (map_allowed_woe(sd->bl.m))
+	{
+		switch (md->class_)
+		{
+		case MOBID_EMPELIUM:
+			add2limit(sd->status.woe_statistics.emperium_kill, 1, USHRT_MAX);
+			break;
+		case MOBID_BARRICADE:
+			add2limit(sd->status.woe_statistics.barricade_kill, 1, USHRT_MAX);
+			break;
+		case MOBID_S_EMPEL_1:
+		case MOBID_S_EMPEL_2:
+			add2limit(sd->status.woe_statistics.gstone_kill, 1, USHRT_MAX);
+			break;
+		case 1285:
+		case 1286:
+		case 1287:
+		case 1899:
+		case 1900:
+			add2limit(sd->status.woe_statistics.guardian_kill, 1, USHRT_MAX);
+			break;
+		}
+	}
+}
+
+void pc_record_maxdamage(struct block_list *src, struct block_list *dst, int damage)
+{
+	struct block_list *s_bl;
+	struct map_session_data *sd;
+
+	if (!src || !dst || src == dst || dst->type != BL_PC || damage <= 0)
+		return;
+
+	if( (s_bl = battle->get_master(src)) == NULL )
+		s_bl = src;
+	
+	if (s_bl->type != BL_PC)
+		return;
+
+	if ((sd = BL_CAST(BL_PC, s_bl)) != NULL)
+	{
+		if (map_allowed_woe(src->m) && sd->status.woe_statistics.top_damage < damage)
+			sd->status.woe_statistics.top_damage = damage;
+	}
+}
+
+void pc_record_damage(struct block_list *src, struct block_list *dst, int damage)
+{
+	struct block_list *s_bl;
+	struct map_session_data *sd;
+
+	if (!src || !dst || src == dst || damage <= 0)
+		return;
+
+	if( (s_bl = battle->get_master(src)) == NULL )
+		s_bl = src;
+
+	if (s_bl->type != BL_PC)
+		return;
+
+	sd = BL_CAST(BL_PC, s_bl);
+
+	switch (dst->type)
+	{
+		case BL_PC:
+			if (map_allowed_woe(src->m))
+			{
+				add2limit(sd->status.woe_statistics.damage_done, damage, UINT_MAX);
+				add2limit(((TBL_PC*)dst)->status.woe_statistics.damage_received, damage, UINT_MAX);
+			}
+			break;
+		case BL_MOB:
+		{
+			struct mob_data *md = BL_CAST(BL_MOB, dst);
+			if (map_allowed_woe(src->m) && md->guardian_data)
+			{
+				switch (md->class_)
+				{
+				case MOBID_EMPELIUM:
+					add2limit(sd->status.woe_statistics.emperium_damage, damage, UINT_MAX);
+					break;
+				case MOBID_BARRICADE:
+					add2limit(sd->status.woe_statistics.barricade_damage, damage, UINT_MAX);
+					break;
+				case MOBID_S_EMPEL_1:
+				case MOBID_S_EMPEL_2:
+					add2limit(sd->status.woe_statistics.gstone_damage, damage, UINT_MAX);
+					break;
+				default:
+					add2limit(sd->status.woe_statistics.guardian_damage, damage, UINT_MAX);
+					break;
+				}
+			}
+			break;
+		}
+	}
+}
+void pc_calc_ranking(struct map_session_data *tsd, struct map_session_data *ssd, int skill_id)
+{
+	int m, Elo;
+	char output[256];
+
+	if (!tsd || !ssd || tsd == ssd)
+		return;
+
+	m = ssd->bl.m;
+	if (map_allowed_woe(m))
+	{
+		/*==========================================
+		* Guild Ranking - War of Emperium
+		*------------------------------------------*/
+		struct guild *tg, *sg;
+		struct guild_castle *gc = guild->mapindex2gc(map_id2index(m));
+
+		if (gc == NULL || gc->guild_id <= 0)
+			return;
+
+		if ((tg = guild_search(tsd->status.guild_id)) == NULL || (sg = guild_search(ssd->status.guild_id)) == NULL)
+			return;
+
+		// Single Player Ranking WoE
+		Elo = (int)(50. / (1 + pow(10., (int)(ssd->status.woe_statistics.score - tsd->status.woe_statistics.score) / 2000.)));
+		add2limit(ssd->status.woe_statistics.score, Elo, 4000);
+		sub2limit(tsd->status.woe_statistics.score, Elo, 0);
+		add2limit(ssd->status.woe_statistics.kill_count, 1, USHRT_MAX);
+		add2limit(tsd->status.woe_statistics.death_count, 1, USHRT_MAX);
+
+		log_woe_kill(ssd, tsd, skill_id);
+
+		//Killer msg
+		sprintf(output, "( You Kill the %s [%s] using <%s> )", job_name(tsd->status.class_), tsd->status.name, (skill_id ? skill->get_desc(skill_id) : "Melee/Reflect/Effect"));
+		clif_disp_onlyself(ssd, output, strlen(output));
+
+		//Target msg
+		sprintf(output, "( The %s [%s] kill you using <%s> )", job_name(ssd->status.class_), ssd->status.name, (skill_id ? skill->get_desc(skill_id) : "Melee/Reflect/Effect"));
+		clif_disp_onlyself(tsd, output, strlen(output));
+	}
+}
+
 /*==========================================
  * Invoked when a player has negative current hp
  *------------------------------------------*/
-int pc_dead(struct map_session_data *sd,struct block_list *src) {
+int pc_dead(struct map_session_data *sd,struct block_list *src, int skill_id) {
 	int i=0,j=0;
 	int64 tick = timer->gettick();
 
@@ -7660,6 +7805,7 @@ int pc_dead(struct map_session_data *sd,struct block_list *src) {
 	if (src != NULL && src->type == BL_PC) {
 		struct map_session_data *ssd = BL_UCAST(BL_PC, src);
 		pc->setparam(ssd, SP_KILLEDRID, sd->bl.id);
+		pc->calc_ranking(sd, ssd, skill_id); // Ranking System
 		npc->script_event(ssd, NPCE_KILLPC);
 
 		if (battle_config.pk_mode&2) {
@@ -11885,4 +12037,9 @@ void pc_defaults(void) {
 	pc->update_idle_time = pc_update_idle_time;
 	
 	pc->have_magnifier = pc_have_magnifier;
+
+	pc->record_damage = pc_record_damage;
+	pc->record_maxdamage = pc_record_maxdamage;
+	pc->record_mobkills = pc_record_mobkills;
+	pc->calc_ranking = pc_calc_ranking;
 }
